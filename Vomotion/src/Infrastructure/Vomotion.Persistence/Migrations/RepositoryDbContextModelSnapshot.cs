// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vomotion.Persistence;

#nullable disable

namespace Vomotion.Persistence.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    partial class RepositoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vomotion.Domain.Entities.FlashCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackSentence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrontSentence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontWord")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("Vomotion.Domain.Entities.FlashCard", (string)null);
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vomotion.Domain.Entities.Language", (string)null);
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentTranslated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int[]>("HighlightedPositionsTranslated")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int[]>("HighlitedPositionsOriginal")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("NotebookId")
                        .HasColumnType("integer");

                    b.Property<string>("TitleOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleTranslated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("UserId");

                    b.ToTable("Vomotion.Domain.Entities.Note", (string)null);
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vomotion.Domain.Entities.Notebook", (string)null);
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NativeLanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("NotebookId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NativeLanguageId");

                    b.HasIndex("NotebookId");

                    b.ToTable("Vomotion.Domain.Entities.User", (string)null);
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.FlashCard", b =>
                {
                    b.HasOne("Vomotion.Domain.Entities.Note", "Note")
                        .WithMany("Flashcards")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Language", b =>
                {
                    b.HasOne("Vomotion.Domain.Entities.User", null)
                        .WithMany("TargetLanguages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Note", b =>
                {
                    b.HasOne("Vomotion.Domain.Entities.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vomotion.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notebook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Notebook", b =>
                {
                    b.HasOne("Vomotion.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.User", b =>
                {
                    b.HasOne("Vomotion.Domain.Entities.Language", "NativeLanguage")
                        .WithMany()
                        .HasForeignKey("NativeLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vomotion.Domain.Entities.Notebook", "Notebook")
                        .WithMany()
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NativeLanguage");

                    b.Navigation("Notebook");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Note", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.Notebook", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Vomotion.Domain.Entities.User", b =>
                {
                    b.Navigation("TargetLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
